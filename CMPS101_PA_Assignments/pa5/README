How Course:     CMPS 101 Abstract Data Types
Date:       June 6, 2019
Professor:  Patrick Tantalo
Assignment: PA5

---------------------------------------------------------------------------------

Name: Cristian Carrillo Castillo Jr
Student ID: 1576341
Cruz ID: ccarri11



Files Included:
* README
* Makefile
* List.c
* List.h
* Graph.h
* Graph.c
* GraphTest.c
* FindComponents.c 

About program:


The main program FindComponents will do the following:
‚Ä¢ Read the input file.
‚Ä¢ Assemble a graph object G using newGraph() and addArc().
‚Ä¢ Print the adjacency list representation of G to the output file.
‚Ä¢ Run DFS on G and ùê∫
ùëá
, processing the vertices in the second call by decreasing finish times from
the first call.
‚Ä¢ Determine the strong components of G.
‚Ä¢ Print the strong components of G to the output file in topologically sorted order.
After the second call to DFS(), the List parameter S can be used to determine the strong components of G.
You should trace the algorithm Strongly-Connected-Components (p.554) on several small examples,
keeping track of the List S to see how this can be done. Input and output file formats are illustrated in the
following example, which corresponds to the directed graph on the first page of this handout:

Input:
8
1 2
2 3
2 5
2 6
3 4
3 7
4 3
4 8
5 1
5 6
6 7
7 6
7 8
8 8
0 0
Output:
Adjacency list representation of G:
1: 2
2: 3 5 6
3: 4 7
4: 3 8
5: 1 6
6: 7
7: 6 8
8: 8
G contains 4 strongly connected components:
Component 1: 1 5 2
Component 2: 3 4
Component 3: 7 6
Component 4: 8