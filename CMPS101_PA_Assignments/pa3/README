How Course:     CMPS 101 Abstract Data Types
Date:       May 11, 2019
Professor:  Patrick Tantalo
Assignment: PA3, with PA1 information

---------------------------------------------------------------------------------

Name: Cristian Carrillo Castillo Jr
Student ID: 1576341
Cruz ID: ccarri11


Matrix ADT:
Files Included:
* Sparse.java	  (written by me)
* Matrix.java	  (written by me)
* MatrixTest.java (CMPS Website)
* ListTest.java   (written by me)
* Makefile	  (CMPS Website)
* README	  (written by me)

About program:
This program, Sparse handles 3 segments in terms of files being ran....
Sparse handles the input/output of files, being the client of Matrix.java.
Which entail is a client of List. This program performs the following operations
With n being the number of rows in A, and a/b denote the num of nnz in A & B.

Asympotic Growth Rates implemented:
A.changeEntry(): Θ(𝑎)
A.copy(): Θ(𝑛 + 𝑎)
A.scalarMult(x): Θ(𝑛 + 𝑎)
A.transpose(): Θ(𝑛 + 𝑎)
A.add(B): Θ(𝑛 + 𝑎 + 𝑏)
A.sub(B): Θ(𝑛 + 𝑎 + 𝑏)
A.mult(B): Θ(𝑛
2 + 𝑎 ⋅ 𝑏)

Matrix class also has a private inner node that you may find, and 
does data hiding, aka encapsulation, which will have the column and value 
information. Entry, will store column and value. I have commented Matrix.java,List.java,
Etc vigorously to guide you through each step, and have added 3 utility functions
To make add/sub/dot more bearable on the eyes & structure. Dot, as in the handout
Just competes the vector dot product of 2 metrics rows which is represented
by List A & List B.

More  on my AddUtility/SubUtility Function

 // Functionality
        /*
                P =  | | | | | | | | | 

                Q =  | | | | | | | | |
		_________________________________
	          *		
                 * * addOutput =  | | | P |Q |P | |  (is the updated list that will be returned to add, the P - Q - P is arbitrary, but it is being tacked on into the new list!

		(new updated list from P & Q) that gets everything concanted @ end,  but is updated with the new data accordingly


                while P or Q, doesnt matter as long as one of these list are not empty we will do the following
                if P.index() != -1 or P.index() != -1, we presume by getting the values in P and Q
                On line 565, if P has values and is not empty, but Q is. we get P which is List One and
                append it to our new Empty list called AddOutput.

                else vice versa for P.index() == -1, but Q is not. Also note as these conditions are set off.
                We get the next value by placing our cursor n = n+1 positions away!


                for line 580, if w have the L.1 col == L.2 col
                
                1)
                Then we create a new entry that willl hold listOne's column and the sum
                of A+B, and we check our condiiton that if the new Entry is not equal to 0 on line 592,
                then we proceed to append it to our new List aka addOutput and move both cursors down both the list in P & Q
                
                2)
                if P.col < Q.col and both list are not at end, then append P's data to the new list aka
                addOutput, else do Q
        
        */
    




       List addOutput = new List(); // create a new list that is in the empty state
       P.moveFront();               // listArray[count] is P, place P at the front
       Q.moveFront();               // M.listArray[count] is the object that was passed from the parameter argument, place Q"s cursor at front of the list

       Entry listOne = (Entry)P.get();      // load up the first value in front of L1
       Entry listTwo = (Entry)Q.get();      // load up the 2nd value in front of L2 by invoking cursor return of index element

        while(P.index() != -1 || Q.index() != -1)   // while either or of our list have not walked off the end of the list
            {
                if(P.index() != -1)                 // if list one has not walked off our list
                {
                    listOne = (Entry) P.get();      // store the element, and continue doing so until we have reached the end of our original list
                }
                if(Q.index() != -1)           // replicate the same process with list 2
                {
                    listTwo = (Entry) Q.get();
                }
                if(P.index() != -1 && Q.index() == -1) // now if my first list is not at the end, but my second list is M.listArray[count] that is basically empty.
                {
                    addOutput.append(listOne);              // we append to our List (addOutput which is going to represent the new modified list) a.(1st list tacking it on) or concat 
                    P.moveNext();                           // move n = n+1 until this condition in ? becomes false, or no longer valid
                }
                if(P.index() == -1 && Q.index() != -1) // else, if its the other way around, then do the same process but with M.ListArray[count]
                {
                    addOutput.append(listTwo);
                    Q.moveNext();
                }
                if(listOne.column == listTwo.column)    // now if both of them are equal column wise, 
                {
                    Entry newEntryC = new Entry();            // create a new entry
                    newEntryC.column = listOne.column;        // store into new Entry the original arr[ (this being listArray)]'s column
                    newEntryC.value = listOne.value + listTwo.value;    // add listOne+listTwo's values pertaining to this pos and store it into our new entry A + B

                    if(newEntryC.value != 0.0) 
                    {
                        addOutput.append(newEntryC);            // we append to the new modified list that will be returned to add
                    }
                    P.moveNext();                               // and we traverse both our list L 1 n = n + 1, continue until you walk off the list for both P & Q
                    Q.moveNext();                               // and we traverse both our list L 2 n = n + 1
                }
                if(listOne.column < listTwo.column && P.index() != -1 && Q.index() != -1) // if listOne's col is smaller then col 2
                {                                                                              // and our 1st (original) & M.listArray list has not reached the end
                    addOutput.append(listOne);                                                 // take l1 and tack it on to the new modified list addOutput ... repeated statement below
                    P.moveNext();                                                              //  and append it to back * [list addOutput]-[append list one] visual *
                }
                if(listTwo.column < listOne.column && P.index() != -1 && Q.index() != -1)
                {
                    addOutput.append(listTwo);                                                 // else you take column's two and append this to the back of list AddOutput
                    Q.moveNext();                                                              // continue to do so until you hve walked off the list.
                }
            }
            return addOutput; // end of AddOutput                               
    }

________________________________________________________________________________
List ADT Data
________________________________________________________________________________
Files Included:
* README             (written by me)
* Makefile           (CMPS Website )
* Lex.java           (written by me)
* List.java          (written by me)
* ListClient.java    (CMPS WebSite)

Notes:

Program Functionality:
Summarized Scope: 

List ADT Description:
Bidirectional queue (doubly linked list) implemented with a cursor to maneuver/manipulate through nodes.
This tool maybe pieced with other source code seamless to the point were no knowledge of 
how List works, but simply by understanding the distinguished functions provided in PA1. 

Lex ADT Description:
Receives two randomized arguments, then rearranges strings in Lexicographic order with 
a modified imitated version of Insertion Sort; reading and writing files I/O.


List ADT Brief Visual:
(Arrows are pointers)

		A[0]   A[1]     A[2].....A[N]
         [Node]->[Node]->[Node]->[Node]->Null
   Null<-[data]<-[data]<-[data]<-[data]       

Brief Visual Concept:

If one calls moveFront() the following will occur with the CURSOR!

		A[0]   A[1]     A[2].....A[N]
         [Node]->[Node]->[Node]->[Node]->Null
   Null<-[data]<-[data]<-[data]<-[data]  
	    ^
           ^^ 
          ^^^^
           ||
           ||     
          (cursor)

Source Code Example:

int main(){
List A = new List();
A.moveFront();
return 0;
}

Continuing E.G/


	     A[0]     A[1]   A[2].....A[N]
         [Node]->[Node]->[Node]->[Node]->Null
   Null<-[data]<-[data]<-[data]<-[data]  
	           ^
                  ^^ 
                 ^^^^
                  ||
                  ||     
               (cursor)

int main(){
List A = new List();
A.moveFront();
A.moveNext(); 
// if move previous cursor becomes undefined, but for this example we will move 
// onto the next node
// Other useful features include but not limited too: insertAfter(),prepend(), append(),movePrev(), etc...
// See PA1 for details
Return 0;
}


End List ADT Brief Visual Concept
_______________________________________________________________________________________

Lex Concept & Visual Description:
Lex Client-> Idea? Whose using the tools (List.java ADT) in the tool box?

Abstraction Explanation:

1) How do you insert array indices into a list?
   * By not sorting array of strings
   * Utilize ADT indirectly, as done for this assignment


Visual:

              A[0]   A[1]   A[2]    A[3]  (indices)     
        A = ( "c"    "a"    "b"     "d" )

Detailed Lex Description README carefully:

Idea: So what do we want to build?

Answer: A list of integers! Which integers the indices stated above.
How implementation came about... Simply one does insertions @ the point they belong too!
How does one find them?

How does one find them?
Answer: You find them by doing something that is equivalent to a single step in insertion sort.
Recall: Insertion sort has outer for loop (for j = 2 to n = A.length) on each iteration of outer
For loop it expands the unsorted section by taking an element in unsorted section and 
Walks through sorted section and finds the position it belongs too, thus inserting it there

Visual of walk:
Idea? Think of the cards being associated with integers!

               O
              /|\
               |\    (Walk Left->right)
              / |
                                 Temp
         A1...............Aj-1..  Aj .....Aj+1 ........An
         [sorted cards]     [card in hand]    [remaining cards on table]

Idea? What will be used: 

Answer: InsertBefore/InsertAfter, and to walk the list with our cursor we will use
        Functions movePrev()/moveNext(). The walk can be from left to right or vice versa.

Idea? How to build...

1) Start :   L = ();    // (empty state) create a list object
   insert 0: L = (0)    // done by doing append/prepend; arbitrary doesn't matter
                        // Note, when L is in this state the sub-array of A that we are looking at
                        // is just "c"
                        //     A[0]       
                        // L = ( 0 ) is just  "c"

How to we insert something else?
Answer: 
InsertBefore/InsertAfter, but first we start by invoking moveFront to place cursor
At the beginning.

A.moveFront()//       L = (0)
                           -
                           ^
                          ^^^ 
                         ^^^^^
                          ||
                          ||     
                        (cursor)

Then we ask? How does one belong to the left of 0. In other words:

              A[0]   A[1]   A[2]    A[3]  (indices)     
        A = ( "c"    "a"    "b"     "d" )

Does "a" belong to the left of "c"? Yes! Thus, an instance of String.compareTo() was 
Implemented to make comparison amongst string. After Lexicographic comparison, then we
Invoke insertBefore().

insertBefore()

After insert1:

                  L = (1   0)        string visual L = ("a"  "c")
                           -
                           ^
                          ^^^ 
                         ^^^^^
                          ||
                          ||     
                        (cursor)

Note: Cursor still remains under integer 0, as we do not care for cursor until next iteration.
      Observe: The outer loop for insertion sort is the initialization of loop. The inner loop
               Will walk down the list, and the outer loop steps through the indices of Array A.

Continuing:

        A[0]   A[1]   A[2]    A[3]  (indices)     
        A = ( "c"    "a"    "b"     "d" )


moveFront(); // places cursor back in front

Insert2: L = (1  0)
              -
              ^
             ^^^ 
            ^^^^^
             ||
             ||     
            (cursor)

Idea? Does 2 belong before 1 ? Essentially does "b" belong before "a"? No, so we invoke:

moveNext(); // result cursor walks down the list to next element

Insert2: L = (1  0)
                 -
                 ^
                ^^^ 
               ^^^^^
                ||
                ||     
              (cursor)

Idea? Does 2 belong before 0? Yes, but not before 1, thus we invoke:

insertBefore();


Updated visual:

Insert2: L = (1   2   0)      // now 2 is inserted, and cursor remains @ 0
                      -
                      ^
                     ^^^ 
                    ^^^^^
                     ||
                     ||     
                  (cursor)

String update of L:  

        L = (1    2    0 )
		       -
                       ^
                      ^^^ 
                     ^^^^^
                      ||
                      ||     
                   (cursor)

        L = ("a"    "b"   "c")
                           ^
                          ^^^ 
                         ^^^^^
                          ||
                          ||     
                        (cursor)

Continuing:
You conceptually follow this process until you are finished, but one last worthy to note is that
When one does a moveNext() per say, and you have fallen off the list... This does NOT indicate
have fallen off a cliff "analogy", but the CURSOR has become undefined; Ergo, indicating that you must append()/prepend()




                                                                          O
                                                                         /|\
                                                                          |\    (Walk Left->right)
                                                                         / |

                                 Temp                 (cursor undefined invoke prepend()/append())
 
         A1...............Aj-1..  Aj .....Aj+1 ........An
         [sorted cards]     [card in hand]    [remaining cards on table]



End of Detailed Lex Visual Explanation/Implementation
-----------------------------------------------------------------------------------------------











