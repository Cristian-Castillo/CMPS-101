Course:     CMPS 101 Abstract Data Types
Date:       May 26, 2019
Professor:  Patrick Tantalo
Assignment: PA4
Note: Modified List.c to reduce memory leaks

------------------------------------------------------------------

Name: Cristian Carrillo Castillo Jr
Student ID: 1576341
Cruz ID: ccarri11

Files Included:

List.c		Written By Me
List.h		Written By Me
Graph.c		Written By Me
Graph.h		Written By Me
GraphTest.c	Written By Me
FindPath.c	Written By Me
Makefile	Provided CMPS 101 Online Resource
README		Written By Me


Notes (Same concept applies as in PA-2,just in C with slight mods in terms of List implementation):

Program Functionality:
Summarized Scope: 

What is Breadth First Search? Given a graph G and a vertex s, called the source vertex, BFS systematically
explores the edges of G to discover every vertex that is reachable from s. It computes the distance from s
to all such reachable vertices. It also produces a BFS tree with root s that contains all vertices reachable
from s. For any vertex v reachable from s, the unique path in the BFS tree from s to v is a shortest path in
G from s to v. Breadth First Search is so named because it expands the frontier between discovered and
undiscovered vertices uniformly across the breadth of the frontier; i.e. the algorithm discovers all vertices
at distance k from s before discovering any vertices at distance k+1. To keep track of its progress and to
construct the tree, BFS requires that each vertex v in G possess the following attributes: a color color[v]
which may be white, gray, or black; a distance d[v] which is the distance from source s to vertex v; and a
parent (or predecessor) p[v] that refers to the parent of v in the BFS tree. At any point during the execution
of BFS, the white vertices are those that are as yet undiscovered, black vertices are discovered, and the gray
vertices form the frontier between discovered and undiscovered vertices. BFS uses a FIFO queue to manage
the set of gray vertices.

Quote from PA 4 Handout Summary

	 (1) ---------------(2)
	 |                 / | \
         |		  /  |  \
	 (3)____________(4)__(5)_(6)


Observe, source = 3

Vertex		Adjacency List (array of List)		color	    distance	    Parent
--------------------------------------------------------------------------------------------------
1	   |		2,3			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
2	   |		1,4,5,6			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
3	   |		2,4			|	 g	 |   0    	  | N/A
--------------------------------------------------------------------------------------------------
4	   |		2,3,5			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
5	   |		2,4,6			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
6	   |		2,5			|	 w	 |   infinity     | Nil


		Queue: 3, 

Given that this is not a directed graph, we take the edges to be the neighbors aka adjacency list.
Since our vertex is 3, then our distance is 0. We enqueue the 3, look at its first neighbor 2, and check
to see if it has been visited, this begins on line 13, but only if the Queue is not empty (See BFS Algorithm).

Vertex		Adjacency List (array of List)		color	    distance	    Parent
--------------------------------------------------------------------------------------------------
1	   |		2,3			|	 g	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
2	   |		1,4,5,6			|	 w	 |   1     	  | 3
--------------------------------------------------------------------------------------------------
3	   |		2*,4			|	 g	 |   0    	  | N/A
--------------------------------------------------------------------------------------------------
4	   |		2,3,5			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
5	   |		2,4,6			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
6	   |		2,5			|	 w	 |   infinity     | Nil
	
		Queue: 3, 2

If it is undiscovered, you update the color grey, the distance is 
equal to the root source distance + 1, and make the parent the root source! Once you have updated
The discovered neighbor. Enqueue "this" discovery in your queue.
Then you moveNext on your adjacency list of arrays. Now we are checking
The root source's 2nd neighbor, 4 that is!

Has it been discovered? No it hasn't, and proceed to update 4 according by following the same steps
above!

Vertex		Adjacency List (array of List)		color	    distance	    Parent
--------------------------------------------------------------------------------------------------
1	   |		2,3			|	 g	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
2	   |		1,4,5,6			|	 w	 |   1     	  | 3
--------------------------------------------------------------------------------------------------
3	   |		2*,4*			|	 g	 |   0    	  | N/A
--------------------------------------------------------------------------------------------------
4	   |		2,3,5			|	 g	 |   1		  | 3
--------------------------------------------------------------------------------------------------
5	   |		2,4,6			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
6	   |		2,5			|	 w	 |   infinity     | Nil
	
		Queue: 3, 2, 4


Visual Tree ( BFS Tree )
=========================

		(3) parent, distance 0
		/ \
   	       /   \
	      /     \
	     (2)    (4) children of 3, distance 1



Now we check if we can moveNext, but there are no more neighbors, thus we color our root vertex, 3
That is, black (b), and we label it underneath with an x to indicate that we have completed checking
Our neighbors, and move on to what's next in our Queue... That is 2.

Vertex		Adjacency List (array of List)		color	    distance	    Parent
--------------------------------------------------------------------------------------------------
1	   |		2,3			|	 g	 |   2		  | 2
--------------------------------------------------------------------------------------------------
2	   |		1,4,5,6			|	 g	 |   1     	  | 3
--------------------------------------------------------------------------------------------------
3	   |		2*,4*			|	 b	 |   0    	  | N/A
--------------------------------------------------------------------------------------------------
4	   |		2,3,5			|	 g	 |   1		  | 3
--------------------------------------------------------------------------------------------------
5	   |		2,4,6			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
6	   |		2,5			|	 w	 |   infinity     | Nil
	
		Queue: 3, 2, 4
		       x


We are now at vertex 2, we will ask ourselves has 1 been discovered? No, thus enqueue 1, set
it is colored to discovered, and the distance is its current self distance+1, update the 
parent. Thus you move next to 4, and ask the same thing... has 4 been discovered, yes it has, thus
we move on to the next neighbor, and ask has 5 been discovered, no it hasn't and you repeat this
conceptual process throughout the entire duration of the program, until all have been discovered,
marked black, and the frontiers in its entirety are discovered.


Vertex		Adjacency List (array of List)		color	    distance	    Parent
--------------------------------------------------------------------------------------------------
1	   |		2,3			|	 g	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
2	   |		1*,4,5,6		|	 w	 |   1     	  | 3
--------------------------------------------------------------------------------------------------
3	   |		2*,4*			|	 b	 |   0    	  | N/A
--------------------------------------------------------------------------------------------------
4	   |		2,3,5			|	 g	 |   1		  | 3
--------------------------------------------------------------------------------------------------
5	   |		2,4,6			|	 w	 |   infinity     | Nil
--------------------------------------------------------------------------------------------------
6	   |		2,5			|	 w	 |   infinity     | Nil
	
		Queue: 3, 2, 4, 1
		       x

Visual Tree ( BFS Tree )
=========================

		(3) parent, distance 0
		/ \
   	       /   \
	      /     \
	     (2)    (4) children of 3, distance 1
	     /
            /
           /
          (1)		child of 2, distance 2


You continue 


End of Summary ------------------------------------------------------------------------------------- 

Pseudo Code Provided

BFS(G,s)
1. For all x is an Element of V(G)- {s}
2. color[x] = white
3. d[x] = infinity
4. p[x] = NIL
5. color[s] = gray
6. d[s] = 0
7. p[s] = 0
8. Q = emptySet
9. Enqueue(Q,s)
10. While Q != emptySet
11. x = Dequeue(Q)
12. For all y is an Element adj[x]
13. 	if color[y] == white
14. 		color[y] = gray
15.		d[y] = d[x]+1
16.		p[y] = x
17.		Enqueue(Q,y)
18. color[x] = black



Implemented the above pseudo Algorithm in Graph.c that was provided by instructor handout.




