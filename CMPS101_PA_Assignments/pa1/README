Course:     CMPS 101 Abstract Data Types
Date:       April 6, 2019
Professor:  Patrick Tantalo
Assignment: PA1

------------------------------------------------------------------

Name: Cristian Carrillo Castillo Jr
Student ID: 1576341
Cruz ID: ccarri11

Files Included:
* README             (written by me)
* Makefile           (CMPS Website )
* Lex.java           (written by me)
* List.java          (written by me)
* ListClient.java    (CMPS WebSite )

Notes:

Program Functionality:
Summarized Scope: 

List ADT Description:
Bidirectional queue (doubly linked list) implemented with a cursor to maneuver/manipulate through nodes.
This tool maybe pieced with other source code seamless to the point were no knowledge of 
how List works, but simply by understanding the distinguished functions provided in PA1. 

Lex ADT Description:
Receives two randomized arguments, then rearranges strings in Lexicographic order with 
a modified imitated version of Insertion Sort; reading and writing files I/O.


List ADT Brief Visual:
(Arrows are pointers)

		A[0]   A[1]     A[2].....A[N]
         [Node]->[Node]->[Node]->[Node]->Null
   Null<-[data]<-[data]<-[data]<-[data]       

Brief Visual Concept:

If one calls moveFront() the following will occur with the CURSOR!

		A[0]   A[1]     A[2].....A[N]
         [Node]->[Node]->[Node]->[Node]->Null
   Null<-[data]<-[data]<-[data]<-[data]  
	    ^
           ^^ 
          ^^^^
           ||
           ||     
          (cursor)

Source Code Example:

int main(){
List A = new List();
A.moveFront();
return 0;
}

Continuing E.G/


	     A[0]     A[1]   A[2].....A[N]
         [Node]->[Node]->[Node]->[Node]->Null
   Null<-[data]<-[data]<-[data]<-[data]  
	           ^
                  ^^ 
                 ^^^^
                  ||
                  ||     
               (cursor)

int main(){
List A = new List();
A.moveFront();
A.moveNext(); 
// if move previous cursor becomes undefined, but for this example we will move 
// onto the next node
// Other useful features include but not limited too: insertAfter(),prepend(), append(),movePrev(), etc...
// See PA1 for details
Return 0;
}


End List ADT Brief Visual Concept
_______________________________________________________________________________________

Lex Concept & Visual Description:
Lex Client-> Idea? Whose using the tools (List.java ADT) in the tool box?

Abstraction Explanation:

1) How do you insert array indices into a list?
   * By not sorting array of strings
   * Utilize ADT indirectly, as done for this assignment


Visual:

              A[0]   A[1]   A[2]    A[3]  (indices)     
        A = ( "c"    "a"    "b"     "d" )

Detailed Lex Description README carefully:

Idea: So what do we want to build?

Answer: A list of integers! Which integers the indices stated above.
How implementation came about... Simply one does insertions @ the point they belong too!
How does one find them?

How does one find them?
Answer: You find them by doing something that is equivalent to a single step in insertion sort.
Recall: Insertion sort has outer for loop (for j = 2 to n = A.length) on each iteration of outer
For loop it expands the unsorted section by taking an element in unsorted section and 
Walks through sorted section and finds the position it belongs too, thus inserting it there

Visual of walk:
Idea? Think of the cards being associated with integers!

               O
              /|\
               |\    (Walk Left->right)
              / |
                                 Temp
         A1...............Aj-1..  Aj .....Aj+1 ........An
         [sorted cards]     [card in hand]    [remaining cards on table]

Idea? What will be used: 

Answer: InsertBefore/InsertAfter, and to walk the list with our cursor we will use
        Functions movePrev()/moveNext(). The walk can be from left to right or vice versa.

Idea? How to build...

1) Start :   L = ();    // (empty state) create a list object
   insert 0: L = (0)    // done by doing append/prepend; arbitrary doesn't matter
                        // Note, when L is in this state the sub-array of A that we are looking at
                        // is just "c"
                        //     A[0]       
                        // L = ( 0 ) is just  "c"

How to we insert something else?
Answer: 
InsertBefore/InsertAfter, but first we start by invoking moveFront to place cursor
At the beginning.

A.moveFront()//       L = (0)
                           -
                           ^
                          ^^^ 
                         ^^^^^
                          ||
                          ||     
                        (cursor)

Then we ask? How does one belong to the left of 0. In other words:

              A[0]   A[1]   A[2]    A[3]  (indices)     
        A = ( "c"    "a"    "b"     "d" )

Does "a" belong to the left of "c"? Yes! Thus, an instance of String.compareTo() was 
Implemented to make comparison amongst string. After Lexicographic comparison, then we
Invoke insertBefore().

insertBefore()

After insert1:

                  L = (1   0)        string visual L = ("a"  "c")
                           -
                           ^
                          ^^^ 
                         ^^^^^
                          ||
                          ||     
                        (cursor)

Note: Cursor still remains under integer 0, as we do not care for cursor until next iteration.
      Observe: The outer loop for insertion sort is the initialization of loop. The inner loop
               Will walk down the list, and the outer loop steps through the indices of Array A.

Continuing:

        A[0]   A[1]   A[2]    A[3]  (indices)     
        A = ( "c"    "a"    "b"     "d" )


moveFront(); // places cursor back in front

Insert2: L = (1  0)
              -
              ^
             ^^^ 
            ^^^^^
             ||
             ||     
            (cursor)

Idea? Does 2 belong before 1 ? Essentially does "b" belong before "a"? No, so we invoke:

moveNext(); // result cursor walks down the list to next element

Insert2: L = (1  0)
                 -
                 ^
                ^^^ 
               ^^^^^
                ||
                ||     
              (cursor)

Idea? Does 2 belong before 0? Yes, but not before 1, thus we invoke:

insertBefore();


Updated visual:

Insert2: L = (1   2   0)      // now 2 is inserted, and cursor remains @ 0
                      -
                      ^
                     ^^^ 
                    ^^^^^
                     ||
                     ||     
                  (cursor)

String update of L:  

        L = (1    2    0 )
		       -
                       ^
                      ^^^ 
                     ^^^^^
                      ||
                      ||     
                   (cursor)

        L = ("a"    "b"   "c")
                           ^
                          ^^^ 
                         ^^^^^
                          ||
                          ||     
                        (cursor)

Continuing:
You conceptually follow this process until you are finished, but one last worthy to note is that
When one does a moveNext() per say, and you have fallen off the list... This does NOT indicate
have fallen off a cliff "analogy", but the CURSOR has become undefined; Ergo, indicating that you must append()/prepend()




                                                                          O
                                                                         /|\
                                                                          |\    (Walk Left->right)
                                                                         / |

                                 Temp                 (cursor undefined invoke prepend()/append())
 
         A1...............Aj-1..  Aj .....Aj+1 ........An
         [sorted cards]     [card in hand]    [remaining cards on table]



End of Detailed Lex Visual Explanation/Implementation
-----------------------------------------------------------------------------------------------











